{"version":3,"file":"1-timer-0e37ad67.js","sources":["../../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from \"flatpickr\";\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n//Змінні\nlet userSelectedDate; //Вказані користувачем дата та час \nlet startButton = document.querySelector('[data-start]'); //Кнопка Старту\nlet timerIntervalId; //Ідентифікатор інтервалу таймера\n\nconst dateTimePickrElem = document.querySelector('#datetime-picker'); //Елемент поле вводу - Календар \n\nconst daysElement= document.querySelector('[data-days]'); //Елемент відображення днів\nconst hoursElement = document.querySelector('[data-hours]'); //Елемент відображення годин\nconst minutesElement = document.querySelector('[data-minutes]'); //Елемент відображення хвилин\nconst secondsElement = document.querySelector('[data-seconds]'); //Елемент відображення секунд\n\n//Неактивна кнопка Старт на момент відкриття сторінки\nstartButton.disabled = true; \n\n//Опції відкриття календаря\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) { //Подія закриття календаря\n      if (selectedDates[0] > Date.now()) //Перевірка - обрана дата у майбутньому\n      {\n        userSelectedDate = selectedDates[0]; //Запис обраної дати у змінну\n        startButton.disabled = false; //Активна кнопка Старт\n      } \n      else \n      {\n        userSelectedDate = undefined; //Змачення змінної не визначено\n        startButton.disabled = true; ///Неактивна кнопка Старт\n        //Повідомлення\n        iziToast.error({\n          message: 'Please choose a date in the future',\n          position: 'topRight'\n        });\n      }\n    },\n  };\n\n  //Створення календаря\n  flatpickr(dateTimePickrElem, options);\n\n  //Відображення відліку часу\n  function showTimer(){\n    const timeBalance = userSelectedDate - Date.now(); //Різниця часу між поточним та вказаним користувачем\n    const { days, hours, minutes, seconds } = convertMs(timeBalance); //Розрахунок залишку часу\n  \n    if (!isNaN(days) && !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds)) //Перевірка значень\n    {\n      //Відображення значень на екрані\n      daysElement.textContent = formatTimerValue(days);\n      hoursElement.textContent = formatTimerValue(hours);\n      minutesElement.textContent = formatTimerValue(minutes);\n      secondsElement.textContent = formatTimerValue(seconds);   \n    }\n\n    //Зупинка виклику відображення таймеру щосекунди\n    if(timeBalance <= 0 ){\n      if(timerInterval){\n        clearInterval(timerIntervalId);\n      }\n    }\n};\n\n//Додавання 0, якщо кількість символів 1.\nfunction formatTimerValue(value) {\n  return String(value).padStart(2, '0');\n}\n\n//Подія - натискання кнопки Старт\n  startButton.addEventListener('click', () => {\n    if (userSelectedDate) {\n      timerIntervalId = setInterval(showTimer, 1000); //Встановлення інтревалу виклику щосекунди\n    }\n  });\n\n  function convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n  console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n  console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n  console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}"],"names":["userSelectedDate","startButton","timerIntervalId","dateTimePickrElem","daysElement","hoursElement","minutesElement","secondsElement","options","selectedDates","iziToast","flatpickr","showTimer","timeBalance","days","hours","minutes","seconds","convertMs","formatTimerValue","value","ms"],"mappings":"gDAUA,IAAIA,EACAC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAEJ,MAAMC,EAAoB,SAAS,cAAc,kBAAkB,EAE7DC,EAAa,SAAS,cAAc,aAAa,EACjDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAG9DN,EAAY,SAAW,GAGvB,MAAMO,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAI,KAAK,IAAK,GAE/BT,EAAmBS,EAAc,CAAC,EAClCR,EAAY,SAAW,KAIvBD,EAAmB,OACnBC,EAAY,SAAW,GAEvBS,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UACpB,CAAS,EAEJ,CACL,EAGEC,EAAUR,EAAmBK,CAAO,EAGpC,SAASI,GAAW,CAClB,MAAMC,EAAcb,EAAmB,KAAK,IAAG,EACzC,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAW,EAE3D,CAAC,MAAMC,CAAI,GAAK,CAAC,MAAMC,CAAK,GAAK,CAAC,MAAMC,CAAO,GAAK,CAAC,MAAMC,CAAO,IAGpEb,EAAY,YAAce,EAAiBL,CAAI,EAC/CT,EAAa,YAAcc,EAAiBJ,CAAK,EACjDT,EAAe,YAAca,EAAiBH,CAAO,EACrDT,EAAe,YAAcY,EAAiBF,CAAO,GAIpDJ,GAAe,GACb,eACD,cAAcX,CAAe,CAGrC,CAGA,SAASiB,EAAiBC,EAAO,CAC/B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGEnB,EAAY,iBAAiB,QAAS,IAAM,CACtCD,IACFE,EAAkB,YAAYU,EAAW,GAAI,EAEnD,CAAG,EAED,SAASM,EAAUG,EAAI,CAQrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAE1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EAEpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EAEjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,QAAQ,IAAIC,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}